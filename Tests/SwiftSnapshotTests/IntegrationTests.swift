import XCTest
@testable import SwiftSnapshot

final class IntegrationTests: XCTestCase {
    
    override func setUp() {
        super.setUp()
        SwiftSnapshotConfig.setGlobalRoot(nil)
        SwiftSnapshotConfig.setGlobalHeader(nil)
        SwiftSnapshotConfig.setFormattingProfile(FormatProfile())
        SwiftSnapshotConfig.setRenderOptions(RenderOptions())
    }
    
    // MARK: - Complex Type Tests
    
    func testComplexUserModel() throws {
        enum Role {
            case admin
            case manager
            case employee
        }
        
        struct User {
            let id: Int
            var name: String
            var role: Role
            var isActive: Bool
            var tags: [String]
        }
        
        let user = User(
            id: 42,
            name: "Alice",
            role: .admin,
            isActive: true,
            tags: ["admin", "beta"]
        )
        
        let code = try SwiftSnapshotRuntime.generateSwiftCode(
            instance: user,
            variableName: "testUserCreation",
            header: "// Test Fixtures\n// Generated by SwiftSnapshot",
            context: "Test user with admin role"
        )
        
        // Verify structure
        XCTAssertTrue(code.contains("// Test Fixtures"))
        XCTAssertTrue(code.contains("/// Test user with admin role"))
        XCTAssertTrue(code.contains("import Foundation"))
        XCTAssertTrue(code.contains("extension User"))
        XCTAssertTrue(code.contains("static let testUserCreation: User"))
        XCTAssertTrue(code.contains("User("))
        
        // Verify all properties
        XCTAssertTrue(code.contains("id:"))
        XCTAssertTrue(code.contains("42"))
        XCTAssertTrue(code.contains("name:"))
        XCTAssertTrue(code.contains("Alice"))
        XCTAssertTrue(code.contains("role:"))
        XCTAssertTrue(code.contains(".admin"))
        XCTAssertTrue(code.contains("isActive:"))
        XCTAssertTrue(code.contains("true"))
        XCTAssertTrue(code.contains("tags:"))
        
        print("Generated User fixture:\n\(code)")
    }
    
    func testNestedStructures() throws {
        struct Address {
            let street: String
            let city: String
            let zip: String
        }
        
        struct Person {
            let name: String
            let age: Int
            let address: Address
        }
        
        let person = Person(
            name: "Bob",
            age: 35,
            address: Address(
                street: "123 Main St",
                city: "Springfield",
                zip: "12345"
            )
        )
        
        let code = try SwiftSnapshotRuntime.generateSwiftCode(
            instance: person,
            variableName: "testPerson"
        )
        
        XCTAssertTrue(code.contains("extension Person"))
        XCTAssertTrue(code.contains("Person("))
        XCTAssertTrue(code.contains("name:"))
        XCTAssertTrue(code.contains("Bob"))
        XCTAssertTrue(code.contains("address:"))
        XCTAssertTrue(code.contains("Address("))
        XCTAssertTrue(code.contains("street:"))
        XCTAssertTrue(code.contains("123 Main St"))
        
        print("Generated nested structure fixture:\n\(code)")
    }
    
    func testProductModel() throws {
        struct Product {
            let id: String
            let name: String
            let price: Double
            let categories: [String]
            let isAvailable: Bool
            let metadata: [String: String]
        }
        
        let product = Product(
            id: "PROD-001",
            name: "Widget",
            price: 29.99,
            categories: ["Electronics", "Gadgets"],
            isAvailable: true,
            metadata: ["manufacturer": "ACME Corp", "sku": "WDG-001"]
        )
        
        let code = try SwiftSnapshotRuntime.generateSwiftCode(
            instance: product,
            variableName: "testProduct",
            context: """
            Standard product fixture used across pricing tests.
            Represents typical e-commerce product with complete metadata.
            """
        )
        
        XCTAssertTrue(code.contains("/// Standard product fixture"))
        XCTAssertTrue(code.contains("/// Represents typical e-commerce"))
        XCTAssertTrue(code.contains("extension Product"))
        XCTAssertTrue(code.contains("Product("))
        XCTAssertTrue(code.contains("PROD-001"))
        XCTAssertTrue(code.contains("Widget"))
        XCTAssertTrue(code.contains("29.99"))
        XCTAssertTrue(code.contains("Electronics"))
        XCTAssertTrue(code.contains("manufacturer"))
        XCTAssertTrue(code.contains("ACME Corp"))
        
        print("Generated Product fixture:\n\(code)")
    }
    
    func testArrayOfStructs() throws {
        struct Item {
            let id: Int
            let name: String
        }
        
        let items = [
            Item(id: 1, name: "First"),
            Item(id: 2, name: "Second"),
            Item(id: 3, name: "Third")
        ]
        
        let code = try SwiftSnapshotRuntime.generateSwiftCode(
            instance: items,
            variableName: "testItems"
        )
        
        XCTAssertTrue(code.contains("extension Array"))
        XCTAssertTrue(code.contains("Item("))
        XCTAssertTrue(code.contains("First"))
        XCTAssertTrue(code.contains("Second"))
        XCTAssertTrue(code.contains("Third"))
        
        print("Generated array of structs fixture:\n\(code)")
    }
    
    func testDictionaryWithComplexValues() throws {
        struct Config {
            let enabled: Bool
            let timeout: Int
        }
        
        let configs: [String: Config] = [
            "production": Config(enabled: true, timeout: 30),
            "staging": Config(enabled: true, timeout: 60),
            "development": Config(enabled: false, timeout: 120)
        ]
        
        let code = try SwiftSnapshotRuntime.generateSwiftCode(
            instance: configs,
            variableName: "testConfigs"
        )
        
        XCTAssertTrue(code.contains("extension Dictionary"))
        XCTAssertTrue(code.contains("production"))
        XCTAssertTrue(code.contains("staging"))
        XCTAssertTrue(code.contains("development"))
        XCTAssertTrue(code.contains("Config("))
        
        print("Generated dictionary with complex values:\n\(code)")
    }
    
    func testOptionalFields() throws {
        struct Task {
            let id: Int
            let title: String
            let description: String?
            let dueDate: Date?
        }
        
        let task = Task(
            id: 1,
            title: "Complete project",
            description: "Finish the implementation",
            dueDate: Date(timeIntervalSince1970: 1234567890)
        )
        
        let code = try SwiftSnapshotRuntime.generateSwiftCode(
            instance: task,
            variableName: "testTask"
        )
        
        XCTAssertTrue(code.contains("extension Task"))
        XCTAssertTrue(code.contains("Task("))
        XCTAssertTrue(code.contains("Complete project"))
        XCTAssertTrue(code.contains("Finish the implementation"))
        XCTAssertTrue(code.contains("Date(timeIntervalSince1970:"))
        
        print("Generated task with optionals:\n\(code)")
    }
    
    func testFileExportWorkflow() throws {
        struct APIResponse {
            let success: Bool
            let timestamp: Date
            let data: [String: String]
        }
        
        let response = APIResponse(
            success: true,
            timestamp: Date(timeIntervalSince1970: 1609459200),
            data: ["userId": "12345", "token": "abc123"]
        )
        
        let tempDir = FileManager.default.temporaryDirectory
            .appendingPathComponent("SwiftSnapshotTests")
            .appendingPathComponent(UUID().uuidString)
        
        let url = try SwiftSnapshotRuntime.export(
            instance: response,
            variableName: "successResponse",
            fileName: "APIResponse+Fixtures",
            outputBasePath: tempDir.path,
            header: "// API Test Fixtures",
            context: "Successful API response fixture"
        )
        
        // Verify file exists
        XCTAssertTrue(FileManager.default.fileExists(atPath: url.path))
        
        // Verify file name
        XCTAssertTrue(url.lastPathComponent == "APIResponse+Fixtures.swift")
        
        // Read and verify content
        let content = try String(contentsOf: url, encoding: .utf8)
        XCTAssertTrue(content.contains("// API Test Fixtures"))
        XCTAssertTrue(content.contains("/// Successful API response fixture"))
        XCTAssertTrue(content.contains("extension APIResponse"))
        XCTAssertTrue(content.contains("static let successResponse: APIResponse"))
        XCTAssertTrue(content.contains("success: true"))
        XCTAssertTrue(content.contains("timestamp:"))
        XCTAssertTrue(content.contains("userId"))
        
        print("Exported to: \(url.path)")
        print("Content:\n\(content)")
        
        // Cleanup
        try? FileManager.default.removeItem(at: tempDir)
    }
    
    // MARK: - Custom Renderer Test
    
    func testCustomRenderer() throws {
        struct CustomType {
            let value: String
        }
        
        // Register custom renderer
        SnapshotRendererRegistry.shared.register(CustomType.self) { value, context in
            ExprSyntax(stringLiteral: "CustomType(value: \"CUSTOM_\(value.value)\")")
        }
        
        let custom = CustomType(value: "test")
        let code = try SwiftSnapshotRuntime.generateSwiftCode(
            instance: custom,
            variableName: "testCustom"
        )
        
        XCTAssertTrue(code.contains("CUSTOM_test"))
        
        print("Generated with custom renderer:\n\(code)")
    }
    
    // MARK: - Edge Cases
    
    func testEmptyCollections() throws {
        struct Container {
            let array: [Int]
            let dict: [String: Int]
            let set: Set<Int>
        }
        
        let container = Container(array: [], dict: [:], set: [])
        let code = try SwiftSnapshotRuntime.generateSwiftCode(
            instance: container,
            variableName: "emptyContainer"
        )
        
        XCTAssertTrue(code.contains("[]"))
        XCTAssertTrue(code.contains("[:"))
        
        print("Generated empty collections:\n\(code)")
    }
    
    func testSpecialCharacters() throws {
        struct Message {
            let text: String
            let emoji: String
            let code: String
        }
        
        let message = Message(
            text: "Hello\nWorld\t\"quoted\"",
            emoji: "🎉🚀",
            code: "let x = \"test\""
        )
        
        let code = try SwiftSnapshotRuntime.generateSwiftCode(
            instance: message,
            variableName: "testMessage"
        )
        
        XCTAssertTrue(code.contains("\\n"))
        XCTAssertTrue(code.contains("\\t"))
        XCTAssertTrue(code.contains("\\\""))
        
        print("Generated with special characters:\n\(code)")
    }
}
