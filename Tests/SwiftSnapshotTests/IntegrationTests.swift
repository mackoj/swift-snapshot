import InlineSnapshotTesting
import Testing

@testable import SwiftSnapshot

extension SnapshotTests {
  @Suite struct IntegrationTests {
    init() {
      SwiftSnapshotConfig.setGlobalRoot(nil)
      SwiftSnapshotConfig.setGlobalHeader(nil)
      SwiftSnapshotConfig.setFormattingProfile(FormatProfile())
      SwiftSnapshotConfig.setRenderOptions(RenderOptions())
    }

    // MARK: - Complex Type Tests

    @Test func complexUserModel() throws {
    enum Role {
      case admin
      case manager
      case employee
    }

    struct User {
      let id: Int
      var name: String
      var role: Role
      var isActive: Bool
      var tags: [String]
    }

    let user = User(
      id: 42,
      name: "Alice",
      role: .admin,
      isActive: true,
      tags: ["admin", "beta"]
    )

    let code = try SwiftSnapshotRuntime.generateSwiftCode(
      instance: user,
      variableName: "testUserCreation",
      header: "// Test Fixtures\n// Generated by SwiftSnapshot",
      context: "Test user with admin role"
    )

    assertInlineSnapshot(of: code, as: .description) {
      """
      // Test Fixtures
      // Generated by SwiftSnapshot

      /// Test user with admin role
      import Foundation

      extension User {
          static let testUserCreation: User = User(
              id: 42, name: "Alice", role: .admin, isActive: true, tags: ["admin", "beta"])
      }

      """
    }
  }

    @Test func nestedStructures() throws {
    struct Address {
      let street: String
      let city: String
      let zip: String
    }

    struct Person {
      let name: String
      let age: Int
      let address: Address
    }

    let person = Person(
      name: "Bob",
      age: 35,
      address: Address(
        street: "123 Main St",
        city: "Springfield",
        zip: "12345"
      )
    )

    let code = try SwiftSnapshotRuntime.generateSwiftCode(
      instance: person,
      variableName: "testPerson"
    )

    assertInlineSnapshot(of: code, as: .description) {
      """
      import Foundation

      extension Person {
          static let testPerson: Person = Person(
              name: "Bob", age: 35,
              address: Address(street: "123 Main St", city: "Springfield", zip: "12345"))
      }

      """
    }
  }

    @Test func productModel() throws {
    struct Product {
      let id: String
      let name: String
      let price: Double
      let categories: [String]
      let isAvailable: Bool
      let metadata: [String: String]
    }

    let product = Product(
      id: "PROD-001",
      name: "Widget",
      price: 29.99,
      categories: ["Electronics", "Gadgets"],
      isAvailable: true,
      metadata: ["manufacturer": "ACME Corp", "sku": "WDG-001"]
    )

    let code = try SwiftSnapshotRuntime.generateSwiftCode(
      instance: product,
      variableName: "testProduct",
      context: """
        Standard product fixture used across pricing tests.
        Represents typical e-commerce product with complete metadata.
        """
    )

    assertInlineSnapshot(of: code, as: .description) {
      """
      /// Standard product fixture used across pricing tests.
      /// Represents typical e-commerce product with complete metadata.
      import Foundation

      extension Product {
          static let testProduct: Product = Product(
              id: "PROD-001", name: "Widget", price: 29.99, categories: ["Electronics", "Gadgets"],
              isAvailable: true, metadata: ["manufacturer": "ACME Corp", "sku": "WDG-001"])
      }

      """
    }
  }

    @Test func arrayOfStructs() throws {
    struct Item {
      let id: Int
      let name: String
    }

    let items = [
      Item(id: 1, name: "First"),
      Item(id: 2, name: "Second"),
      Item(id: 3, name: "Third"),
    ]

    let code = try SwiftSnapshotRuntime.generateSwiftCode(
      instance: items,
      variableName: "testItems"
    )

    assertInlineSnapshot(of: code, as: .description) {
      """
      import Foundation

      extension Array<Item> {
          static let testItems: Array<Item> = [
              Item(id: 1, name: "First"), Item(id: 2, name: "Second"), Item(id: 3, name: "Third"),
          ]
      }

      """
    }
  }

    @Test func dictionaryWithComplexValues() throws {
    struct Config {
      let enabled: Bool
      let timeout: Int
    }

    let configs: [String: Config] = [
      "production": Config(enabled: true, timeout: 30),
      "staging": Config(enabled: true, timeout: 60),
      "development": Config(enabled: false, timeout: 120),
    ]

    let code = try SwiftSnapshotRuntime.generateSwiftCode(
      instance: configs,
      variableName: "testConfigs"
    )

    assertInlineSnapshot(of: code, as: .description) {
      """
      import Foundation

      extension Dictionary<String, Config> {
          static let testConfigs: Dictionary<String, Config> = [
              "development": Config(enabled: false, timeout: 120),
              "production": Config(enabled: true, timeout: 30),
              "staging": Config(enabled: true, timeout: 60),
          ]
      }

      """
    }
  }

    @Test func optionalFields() throws {
    struct Task {
      let id: Int
      let title: String
      let description: String?
      let dueDate: Date?
    }

    let task = Task(
      id: 1,
      title: "Complete project",
      description: "Finish the implementation",
      dueDate: Date(timeIntervalSince1970: 1_234_567_890)
    )

    let code = try SwiftSnapshotRuntime.generateSwiftCode(
      instance: task,
      variableName: "testTask"
    )

    assertInlineSnapshot(of: code, as: .description) {
      """
      import Foundation

      extension Task {
          static let testTask: Task = Task(
              id: 1, title: "Complete project", description: "Finish the implementation",
              dueDate: Date(timeIntervalSince1970: 1234567890.0))
      }

      """
    }
  }

    @Test func fileExportWorkflow() throws {
    struct APIResponse {
      let success: Bool
      let timestamp: Date
      let data: [String: String]
    }

    let response = APIResponse(
      success: true,
      timestamp: Date(timeIntervalSince1970: 1_609_459_200),
      data: ["userId": "12345", "token": "abc123"]
    )

    let tempDir = FileManager.default.temporaryDirectory
      .appendingPathComponent("SwiftSnapshotTests")
      .appendingPathComponent(UUID().uuidString)

    let url = try SwiftSnapshotRuntime.export(
      instance: response,
      variableName: "successResponse",
      fileName: "APIResponse+Fixtures",
      outputBasePath: tempDir.path,
      header: "// API Test Fixtures",
      context: "Successful API response fixture"
    )
    // Cleanup
    defer { try? FileManager.default.removeItem(at: tempDir) }

    // Verify file exists
    #expect(FileManager.default.fileExists(atPath: url.path))

    // Verify file name
    #expect(url.lastPathComponent == "APIResponse+Fixtures.swift")

    // Read and verify content
    let content = try String(contentsOf: url, encoding: .utf8)
    assertInlineSnapshot(of: content, as: .description) {
      """
      // API Test Fixtures

      /// Successful API response fixture
      import Foundation

      extension APIResponse {
          static let successResponse: APIResponse = APIResponse(
              success: true, timestamp: Date(timeIntervalSince1970: 1609459200.0),
              data: ["token": "abc123", "userId": "12345"])
      }

      """
    }
  }

    // MARK: - Custom Renderer Test

    @Test func customRenderer() throws {
    struct CustomType {
      let value: String
    }

    // Register custom renderer
    SnapshotRendererRegistry.shared.register(CustomType.self) { value, context in
      ExprSyntax(stringLiteral: "CustomType(value: \"CUSTOM_\(value.value)\")")
    }

    let custom = CustomType(value: "test")
    let code = try SwiftSnapshotRuntime.generateSwiftCode(
      instance: custom,
      variableName: "testCustom"
    )

    assertInlineSnapshot(of: code, as: .description) {
      """
      import Foundation

      extension CustomType { static let testCustom: CustomType = CustomType(value: "CUSTOM_test") }

      """
    }
  }

    // MARK: - Edge Cases

    @Test func emptyCollections() throws {
    struct Container {
      let array: [Int]
      let dict: [String: Int]
      let set: Set<Int>
    }

    let container = Container(array: [], dict: [:], set: [])
    let code = try SwiftSnapshotRuntime.generateSwiftCode(
      instance: container,
      variableName: "emptyContainer"
    )

    assertInlineSnapshot(of: code, as: .description) {
      """
      import Foundation

      extension Container {
          static let emptyContainer: Container = Container(array: [], dict: [:], set: Set([]))
      }

      """
    }
  }

    @Test func specialCharacters() throws {
    struct Message {
      let text: String
      let emoji: String
      let code: String
    }

    let message = Message(
      text: "Hello\nWorld\t\"quoted\"",
      emoji: "ðŸŽ‰ðŸš€",
      code: "let x = \"test\""
    )

    let code = try SwiftSnapshotRuntime.generateSwiftCode(
      instance: message,
      variableName: "testMessage"
    )

    assertInlineSnapshot(of: code, as: .description) {
      #"""
      import Foundation

      extension Message {
          static let testMessage: Message = Message(
              text: #"Hello\nWorld\t\"quoted\""#, emoji: #"\u{1F389}\u{1F680}"#,
              code: #"let x = \"test\""#)
      }

      """#
    }
    }
  }
}
